#!/usr/bin/env python3

# vim: set syntax=python:

import argparse
import os
import time
import requests
import yaml
import glob
import sys
from typing import Dict, List

BASE_URL = "https://datreeio.github.io/CRDs-catalog/"
CACHE_DIR = os.path.join(os.path.expanduser("~"), ".cache", "datree_crds_catalog")
INDEX_FILENAME="index.yaml"
INDEX_FILE_MAX_AGE_DAYS = 7
INDEX_FILEPATH = os.path.join(CACHE_DIR, INDEX_FILENAME)
SCRIPT_DIR = os.path.dirname(os.path.abspath(sys.argv[0]))
DEFAULT_LOCAL_SCHEMAS_DIR = os.path.join(SCRIPT_DIR, "schemas")

def download_index_yaml():
    os.makedirs(CACHE_DIR, exist_ok=True)

    do_download = True
    if os.path.isfile(INDEX_FILEPATH):
      mtime = os.path.getmtime(INDEX_FILEPATH)
      if (time.time() - mtime) / (60 * 60 * 24) < INDEX_FILE_MAX_AGE_DAYS:
        do_download = False

    if do_download:
        url = BASE_URL + INDEX_FILENAME
        print(f"Downloading {url} to {INDEX_FILEPATH}...")
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        with open(INDEX_FILEPATH, 'wb') as f:
            f.write(response.content)

def load_index() -> Dict[str, List[Dict[str, str]]]:
    with open(INDEX_FILEPATH, 'r') as f:
        return yaml.safe_load(f)


def find_schema_url(api_version: str, kind: str, index_data: Dict[str, List[Dict[str, str]]], local_schemas_dir: str = None) -> str | None:
    api_version_lower = api_version.lower()
    kind_lower = kind.lower()
    
    schemas_dir = local_schemas_dir or DEFAULT_LOCAL_SCHEMAS_DIR

    # First check for schemas in the configured directory
    if os.path.isdir(schemas_dir):
        print(f"Looking for schemas in {schemas_dir}...")

        
        # Extract group from apiVersion (before the '/')
        group = api_version_lower.split('/')[0] if '/' in api_version_lower else api_version_lower
        
        # Extract version part (after the '/')
        version = api_version_lower.split('/')[1] if '/' in api_version_lower else ''
        
        # Build expected schema path: schemas/<group>/<kind>_<version>.json
        group_dir = os.path.join(schemas_dir, group)
        schema_filename = f"{kind_lower}_{version}.json"
        schema_path = os.path.join(group_dir, schema_filename)
        
        if os.path.isfile(schema_path):
            print(f"Found local schema: {schema_path}")
            return os.path.abspath(schema_path)
    
    # Fall back to online catalog
    for _, entries in index_data.items():
        for entry in entries:
            if entry.get("apiVersion", "").lower() == api_version_lower and entry.get("kind", "").lower() == kind_lower:
                filename = entry.get("filename")
                if filename:
                    print(f"Found online schema: {BASE_URL + filename}")
                    return BASE_URL + filename
    print(f"Schema not found for apiVersion={api_version} kind={kind}.")
    return None

def annotate_file(file_path: str, index_data: Dict[str, List[Dict[str, str]]], schemas_dir: str = None):
    docs = []
    with open(file_path, 'r') as f:
        content = f.read()
    yaml_file_dir = os.path.dirname(os.path.abspath(file_path))
    
    for doc in content.split("---"):
        doc = doc.strip()
        if not doc:
            continue
        data = list(yaml.safe_load_all(doc))[0] if doc else {}
        api_version = data.get("apiVersion")
        kind = data.get("kind")

        lines = doc.splitlines()
        # Remove any existing schema comment
        lines = [ln for ln in lines if not ln.strip().startswith("# yaml-language-server: $schema")]

        if api_version and kind:
            schema_url = find_schema_url(api_version, kind, index_data, schemas_dir)
            if schema_url:
                # If schema URL is a local path, make it relative to the YAML file
                if os.path.isfile(schema_url) and not schema_url.startswith(('http://', 'https://')):
                    rel_path = os.path.relpath(schema_url, yaml_file_dir)
                    print(f"Converting absolute schema path '{schema_url}' to relative path '{rel_path}' (from '{yaml_file_dir}')")
                    schema_url = rel_path
                lines.insert(0, f"# yaml-language-server: $schema={schema_url}")
        docs.append("\n".join(lines))

    with open(file_path, 'w') as f:
        f.write("---\n")
        f.write("\n---\n".join(docs) + "\n")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("yaml_files", nargs="+", help="YAML files to annotate")
    parser.add_argument("--schemas-dir", help=f"Directory containing schema files (default: {DEFAULT_LOCAL_SCHEMAS_DIR})")
    args = parser.parse_args()

    download_index_yaml()
    index_data = load_index()

    for yf in args.yaml_files:
        annotate_file(yf, index_data, args.schemas_dir)

if __name__ == "__main__":
    main()
