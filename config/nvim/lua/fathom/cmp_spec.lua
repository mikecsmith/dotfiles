---@diagnostic disable: undefined-global, undefined-field
local matcher = require("cmp.matcher")
local spec = require("cmp.utils.spec")

describe("matcher", function()
  before_each(spec.before)

  it("c) with disallow_fuzzy_matching", function()
    local score, matches = matcher.match("c)", "c)", { disallow_fuzzy_matching = true })
    print("Score for 'c)' with disallow_fuzzy_matching = true:", score)
    print("Matches for 'c)' with disallow_fuzzy_matching = true:", vim.inspect(matches))
    assert.is.truthy(score >= 1)

    score, matches = matcher.match("c)", "c)", { disallow_fuzzy_matching = false })
    print("Score for 'c)' with disallow_fuzzy_matching = false:", score)
    print("Matches for 'c)' with disallow_fuzzy_matching = false:", vim.inspect(matches))
    assert.is.truthy(score >= 1)
  end)

  it("c) with disallow_fullfuzzy_matching", function()
    local score, matches = matcher.match("c)", "c)", { disallow_fullfuzzy_matching = true })
    print("Score for 'c)' with disallow_fullfuzzy_matching = true:", score)
    print("Matches for 'c)' with disallow_fullfuzzy_matching = true:", vim.inspect(matches))
    assert.is.truthy(score >= 1)

    score, matches = matcher.match("c)", "c)", { disallow_fullfuzzy_matching = false })
    print("Score for 'c)' with disallow_fullfuzzy_matching = false:", score)
    print("Matches for 'c)' with disallow_fullfuzzy_matching = false:", vim.inspect(matches))
    assert.is.truthy(score >= 1)
  end)

  it("c) with disallow_partial_matching", function()
    local score, matches = matcher.match("c)", "c)", { disallow_partial_matching = true })
    print("Score for 'c)' with disallow_partial_matching = true:", score)
    print("Matches for 'c)' with disallow_partial_matching = true:", vim.inspect(matches))
    assert.is.truthy(score >= 1)

    score, matches = matcher.match("c)", "c)", { disallow_partial_matching = false })
    print("Score for 'c)' with disallow_partial_matching = false:", score)
    print("Matches for 'c)' with disallow_partial_matching = false:", vim.inspect(matches))
    assert.is.truthy(score >= 1)
  end)

  it("c) with disallow_prefix_unmatching", function()
    local score, matches = matcher.match("c)", "c)", { disallow_prefix_unmatching = true })
    print("Score for 'c)' with disallow_prefix_unmatching = true:", score)
    print("Matches for 'c)' with disallow_prefix_unmatching = true:", vim.inspect(matches))
    assert.is.truthy(score >= 1)

    score, matches = matcher.match("c)", "c)", { disallow_prefix_unmatching = false })
    print("Score for 'c)' with disallow_prefix_unmatching = false:", score)
    print("Matches for 'c)' with disallow_prefix_unmatching = false:", vim.inspect(matches))
    assert.is.truthy(score >= 1)
  end)

  it("c) with disallow_symbol_nonprefix_matching", function()
    local score, matches = matcher.match("c)", "c)", { disallow_symbol_nonprefix_matching = true })
    print("Score for 'c)' with disallow_symbol_nonprefix_matching = true:", score)
    print("Matches for 'c)' with disallow_symbol_nonprefix_matching = true:", vim.inspect(matches))
    assert.is.truthy(score >= 1)

    score, matches = matcher.match("c)", "c)", { disallow_symbol_nonprefix_matching = false })
    print("Score for 'c)' with disallow_symbol_nonprefix_matching = false:", score)
    print("Matches for 'c)' with disallow_symbol_nonprefix_matching = false:", vim.inspect(matches))
    assert.is.truthy(score >= 1)
  end)

  it("c with disallow_fuzzy_matching", function()
    assert.is.truthy(matcher.match("c", "c)", { disallow_fuzzy_matching = true }) >= 1)
    assert.is.truthy(matcher.match("c", "c)", { disallow_fuzzy_matching = false }) >= 1)
  end)

  it("c with disallow_fullfuzzy_matching", function()
    assert.is.truthy(matcher.match("c", "c)", { disallow_fullfuzzy_matching = true }) >= 1)
    assert.is.truthy(matcher.match("c", "c)", { disallow_fullfuzzy_matching = false }) >= 1)
  end)

  it("c with disallow_partial_matching", function()
    assert.is.truthy(matcher.match("c", "c)", { disallow_partial_matching = true }) >= 1)
    assert.is.truthy(matcher.match("c", "c)", { disallow_partial_matching = false }) >= 1)
  end)

  it("c with disallow_prefix_unmatching", function()
    assert.is.truthy(matcher.match("c", "c)", { disallow_prefix_unmatching = true }) >= 1)
    assert.is.truthy(matcher.match("c", "c)", { disallow_prefix_unmatching = false }) >= 1)
  end)

  it("c with disallow_symbol_nonprefix_matching", function()
    assert.is.truthy(matcher.match("c", "c)", { disallow_symbol_nonprefix_matching = true }) >= 1)
    assert.is.truthy(matcher.match("c", "c)", { disallow_symbol_nonprefix_matching = false }) >= 1)
  end)

  it(") with disallow_fuzzy_matching", function()
    assert.is.truthy(matcher.match(")", "c)", { disallow_fuzzy_matching = true }) >= 1)
    assert.is.truthy(matcher.match(")", "c)", { disallow_fuzzy_matching = false }) >= 1)
  end)

  it(") with disallow_fullfuzzy_matching", function()
    assert.is.truthy(matcher.match(")", "c)", { disallow_fullfuzzy_matching = true }) >= 1)
    assert.is.truthy(matcher.match(")", "c)", { disallow_fullfuzzy_matching = false }) >= 1)
  end)

  it(") with disallow_partial_matching", function()
    assert.is.truthy(matcher.match(")", "c)", { disallow_partial_matching = true }) >= 1)
    assert.is.truthy(matcher.match(")", "c)", { disallow_partial_matching = false }) >= 1)
  end)

  it(") with disallow_prefix_unmatching", function()
    assert.is.truthy(matcher.match(")", "c)", { disallow_prefix_unmatching = true }) == 0)
    assert.is.truthy(matcher.match(")", "c)", { disallow_prefix_unmatching = false }) >= 1)
  end)

  it(") with disallow_symbol_nonprefix_matching", function()
    assert.is.truthy(matcher.match(")", "c)", { disallow_symbol_nonprefix_matching = true }) == 0)
    assert.is.truthy(matcher.match(")", "c)", { disallow_symbol_nonprefix_matching = false }) >= 1)
  end)
end)
